#!/usr/bin/ruby

class Execution
  def initialize(args)
    @args = args
  end
  
  def error(msg)
    return { 'verdict' => msg }
  end
  
  def run()
    # Arguments for the problem
    time_limit = @args['time_limit'].chomp
    input_dir = @args['input_dir']
    output_dir = @args['output_dir']
    test_files = @args['test_files']
    
    # Arguments for the submission
    source_file = @args['source_file']
    language = @args['language']
    
    # TODO
    daemon = 'www-data'
    user_name = 'user_name'
    test_dir = 'for_daemon/test_dir'
    output_file = 'output'
    run_file = 'run'
    time_file = 'time'
    exit_status_file = 'exit_status'
    
    # Make the working directory
    return error('System Error [useradd]') if !system("sudo useradd #{user_name}")
    return error('System Error [mkdir]') if !system("mkdir -p #{test_dir}")
    
    # Compilation
    case language
    when "C++"
      res = !system("g++ -O2 #{source_file} -o #{test_dir}/a > /dev/null 2>&1")
      if res
        compile_error = true
        verdict = "Compile Error"
      end
      execution_cmd = "#{test_dir}/a"
    when "Ruby"
      return error('System error [cp]') if !system("cp #{source_file} #{test_dir}/a.rb")
      execution_cmd = "ruby #{test_dir}/a.rb"
    else
      return error('System error [language]')
    end
    
    # Run test
    if !compile_error
      accepted = true
      verdict = 'Accepted'
      max_execution_time = 0.0
      test_files.each do |test|
        return error('System error [chown]') if !system("sudo chown -R #{user_name}:#{user_name} #{test_dir}")
        return error('System error [run]') if !system("sudo -u #{user_name} sh -c \"echo \'timeout #{time_limit} #{execution_cmd} < #{input_dir}#{test} > #{test_dir}/#{output_file} 2> /dev/null; echo \\$? > #{test_dir}/#{exit_status_file}\' > #{test_dir}/#{run_file}\"")
        return error('System error [echo]') if !system("sudo -u #{user_name} sh -c \"time -o #{test_dir}/#{time_file} -f \\\"%S %U\\\" sh #{test_dir}/#{run_file}\"")
        execution_time = `cat #{test_dir}/#{time_file}`.chomp.split.map(&:to_f).inject(0.0){ |sum, x| sum + x }
        if max_execution_time < execution_time
          max_execution_time = execution_time
        end
	      res = `cat #{test_dir}/#{exit_status_file}`.chomp.to_i
        return error('System error [chown]') if !system("sudo chown -R #{daemon}:#{daemon} #{test_dir}")
        if res == 124
	        accepted = false
          verdict = 'Time Limit Exceeded'
          break
        end
        if res != 0
	        accepted = false
          verdict = 'Runtime Error'
          break
        end
        res = !system("diff -q #{test_dir}/#{output_file} #{output_dir}#{test} > /dev/null 2>&1")
        if res
          accepted = false
          verdict = 'Wrong Answer'
          break
        end
      end
    end
    
    # Remove the working directory
    return error('System error [rm]') if !system("rm -rf #{test_dir}")
    return error('System error [userdel]') if !system("sudo userdel #{user_name}")
    
    if accepted
      return { 'verdict' => verdict + " " + max_execution_time.to_s, 'execution_time' => max_execution_time }
    else
      return { 'verdict' => verdict }
    end
  end
end

